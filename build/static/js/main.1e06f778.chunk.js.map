{"version":3,"sources":["components/Label.js","components/Ticket.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Label","props","className","label","replace","Ticket","onClick","hideTicket","ticket","title","content","labels","map","i","userEmail","formatDate","Date","creationTime","date","dd","getDate","mm","getMonth","yyyy","getFullYear","getHours","hr","ampm","min","getMinutes","sec","getSeconds","SearchBar","useState","searchText","setSearchText","id","type","value","onChange","event","input","target","searchHandler","placeholder","App","tickets","setTickets","hiddenTickets","setHiddenTickets","useEffect","axios","get","then","data","text","Error","length","includes","key","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e06f778.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../styles/Label.css\"\r\n\r\nfunction Label(props) {\r\n    return (\r\n        <div className={`label ${props.label.replace(\" \", \"\")}`}>\r\n            {props.label}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Label\r\n","import React from 'react';\r\nimport Label from \"./Label\";\r\nimport \"../styles/Ticket.css\";\r\n\r\nfunction Ticket(props) {\r\n    return (\r\n        <div className=\"ticket\">\r\n            <div className=\"hideTicketButton\" onClick={props.hideTicket}>Hide</div>\r\n            <h2>{props.ticket.title}</h2>\r\n            <p>{props.ticket.content}</p>\r\n            <div className=\"labelList\">\r\n                {props.labels?.map((label, i) => <Label key={i} label={label} />)}\r\n            </div>\r\n            <p className=\"details\">\r\n                <span>{props.ticket.userEmail}</span> | <span>{formatDate( new Date(props.ticket.creationTime) )}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Ticket;\r\n\r\nfunction formatDate(date) {\r\n    const dd = date.getDate();\r\n    const mm = date.getMonth() + 1;\r\n    const yyyy = date.getFullYear();\r\n    const {hr, ampm} = date.getHours() > 12\r\n        ? {hr: date.getHours() - 12, ampm:\"PM\"}\r\n        :{hr: date.getHours(), ampm:\"AM\"};\r\n    const min = date.getMinutes();\r\n    const sec = date.getSeconds();\r\n    return `${dd}/${mm}/${yyyy}, ${hr}:${min}:${sec} ${ampm}`;\r\n}\r\n","import {useState} from 'react'\r\nimport \"../styles/SearchBar.css\"\r\n\r\nfunction SearchBar(props) {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    \r\n    function onChange(event) {\r\n        const input = event.target.value;\r\n        setSearchText(input);\r\n        props.searchHandler(input);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <input id=\"searchInput\" type=\"text\" value={searchText} onChange={onChange} placeholder=\"Enter search text\"></input>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import \"./App.css\";\r\nimport {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport Ticket from \"./components/Ticket\";\r\nimport SearchBar from \"./components/SearchBar\";\r\n\r\nfunction App() {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [hiddenTickets, setHiddenTickets] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    axios.get(\"/api/tickets\")\r\n    .then(({data}) => setTickets(data));\r\n     \r\n  }, []);\r\n\r\n  function searchHandler(text) {\r\n    if(typeof(text) !== \"string\") throw new Error(\"search input must be of type String\");\r\n    axios.get(\"/api/tickets?searchText=\" + text)\r\n    .then(({data}) => setTickets(data));\r\n  }\r\n\r\n  function hideTicket(key) {\r\n    if(hiddenTickets.includes(key)) return;\r\n    setHiddenTickets( hiddenTickets.concat([key]) );\r\n  }\r\n\r\n  function restoreTickets() {\r\n    setHiddenTickets([]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Ticket Manager</h1>\r\n      <SearchBar searchHandler={searchHandler}/>\r\n      <div className=\"ticketList\">\r\n        <span className=\"ticketListDetails\">\r\n          showing {tickets.length} results\r\n          (<span id=\"hideTicketsCounter\" className=\"hideTicketsCounter\">{hiddenTickets.length}</span>{\" hidden - \"} \r\n          <span id=\"restoreHideTickets\" onClick={restoreTickets}>restore</span>)\r\n        </span>\r\n        {tickets.map( (ticket, i) => \r\n          hiddenTickets.includes(i)\r\n            ? null\r\n            : <Ticket key={i} ticket={ticket} labels={ticket.labels} hideTicket={() => hideTicket(i)}/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}